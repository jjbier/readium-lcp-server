import { Injectable }   from '@angular/core';
import { Http, Headers }         from '@angular/http';

import 'rxjs/add/operator/toPromise';

import { Purchase }     from './purchase';
import { User }         from '../user/user';
import { Publication }  from '../publication/publication';

import { CrudService }  from '../crud/crud.service';

declare var Config: any; //  this comes from the autogenerated config.js file

@Injectable()
export class PurchaseService extends CrudService<Purchase> {
    baseLSDUrl: string = Config.lsd.url;
    constructor (
        http: Http) {
        super();
        this.http = http;
        this.baseUrl = Config.frontend.url + '/api/v1/purchases';
        this.baseLSDUrl = Config.lsd.url;
    }

    decode(jsonObj: any): Purchase {
        return {
            id: jsonObj.id,
            uuid: jsonObj.uuid,
            publication: {
                id: jsonObj.publication.id,
                uuid: jsonObj.publication.uuid,
                title: jsonObj.publication.title,
                format: jsonObj.publication.format
            },
            user: {
                id: jsonObj.user.id,
                uuid: jsonObj.uuid,
                name: jsonObj.user.name,
                email: jsonObj.user.email
            },
            type: jsonObj.type,
            licenseUuid: jsonObj.licenseUuid,
            transactionDate: jsonObj.transactionDate,
            startDate: jsonObj.startDate,
            endDate: jsonObj.endDate,
            status: jsonObj.status
        };
    }

    encode(obj: Purchase): any {
        return {
            id: Number(obj.id),
            uuid: obj.uuid,
            publication: {
                id: Number(obj.publication.id)
            },
            user: {
                id: Number(obj.user.id)
            },
            type: obj.type,
            licenseUuid: obj.licenseUuid,
            startDate: obj.startDate,
            endDate: obj.endDate,
            status: obj.status
        }
    }

    getLicense(id: string): Promise<string> {
        let licenseUrl = this.baseUrl + "/" + id + "/license";
        return this.http
            .get(
                licenseUrl,
                { headers: this.defaultHttpHeaders })
            .toPromise()
            .then(function (response) {
                if (response.ok) {
                    return response.text()
                } else {
                    throw 'Error retrieving license ' + response.text();
                }
            })
            .catch(this.handleError);
    }

    revoke(message:string, licenseID:string): Promise<number> {
        var headers: Headers = new Headers;
        headers.append('Authorization', 'Basic ' + btoa(Config.lsd.user + ":" + Config.lsd.password));

        return this.http
            .patch(
                this.baseLSDUrl + "/licenses/" + licenseID + "/status",
                {status: "revoked",
                message: "Your license has been revoked because overused."},
                { headers: headers })
            .toPromise()
            .then(function (response) {
                if (response.ok) {
                    return 200;
                }
                return;
            })
            .catch(this.handleRevokeError);

            
    }
    handleRevokeError(error: any): Promise<any> {
        return error.status;
    }
}
